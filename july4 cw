Date: 04.07.2025
LinkedList 
class Node{
    int data;
    Node next;
}
public class SingleLinkedList{
    Node head;
    void insert(int value)
    {
        Node newNode=new Node();
        newNode.data = value; //20
        newNode.next = null; //next is null
        
        if(head==null)  //it checks head is empty means
        {
            head=newNode; //it uses the newNode value to the head
        }
        else
        {
            Node temp=head;
            while(temp.next!=null)
            {
             temp=temp.next;
             
            }temp.next=newNode;
        }
    }
    void display()
    {
        Node temp=head;
        while(temp!=null)
        {
            System.out.print(temp.data + " -> ");
            temp=temp.next;
        }
        System.out.println("null");
    }
    
    public static void main(String[] args)
    {
        SingleLinkedList sl=new SingleLinkedList();
        sl.insert(10);
        sl.insert(20);
        sl.insert(30);
        sl.insert(40);
        System.out.println("***Linked List***");
        sl.display();
    }
}

Linkedlist for insert at front and end and specific position

class Node{
    int data;
    Node next;
}
public class SingleLinkedList{
    Node head;
    void insertAtFront(int value)
    {
        Node newNode=new Node();
        newNode.data = value; //20
        newNode.next = head; //next is null
        head = newNode;
    }
    void insertAtEnd(int value)
    {
        Node newNode=new Node();
        newNode.data = value; //20
        newNode.next = null; //next is null
      
        if(head==null)  //it checks head is empty means
        {
            head=newNode; //it uses the newNode value to the head
        }
        else
        {
            Node temp=head;
            while(temp.next!=null)
            {
             temp=temp.next;
             
            }temp.next=newNode;
        }
    }
    void insertAtPosition(int value,int position){
        Node newNode=new Node();
        newNode.data= value;
        if(position==0)
        {
            newNode.next=head;
            head= newNode;
            return;
        }
        Node temp=head;
        int index=0;
        
        while(temp!=null &&index<position-1)
        {
            temp =temp.next;
            index++;
            
        }
        if(temp==null)
        {
            System.out.println("Invalid");
            return;
        }
        newNode.next=temp.next;
        temp.next=newNode;    
        
    }
    
    
    void display()
    {
        Node temp=head;
        while(temp!=null)
        {
            System.out.print(temp.data + " -> ");
            temp=temp.next;
        }
        System.out.println("null");
    }
    
    public static void main(String[] args)
    {
        SingleLinkedList sl=new SingleLinkedList();
        sl.insertAtEnd(10);
        sl.insertAtEnd(20);
        sl.insertAtEnd(30);
        sl.insertAtFront(40);
        sl.insertAtPosition(70,2);
        
        System.out.println("***Linked List***");
        sl.display();
    }
}

