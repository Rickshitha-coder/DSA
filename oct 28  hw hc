Date : 28/10/2025 HW
51. Binary Tree - Identify the Leftmost Batsman in a Cricket Team's Formation

import java.io.*;

import java.util.*;

class Node {

    int val;

    Node left, right;

    Node(int val) {

        this.val = val;

        this.left = null;

        this.right = null;

    }

}

public class Solution {

    
    static Node buildTree(String[] values) {

        if (values.length == 0 || values[0].equals("null")) {

            return null;

        }

        Node root = new Node(Integer.parseInt(values[0]));

        Queue<Node> q = new LinkedList<>();

        q.add(root);

        int i = 1;

        while (!q.isEmpty() && i < values.length) {

            Node curr = q.poll();

            // left child

            if (i < values.length && !values[i].equals("null")) {

                curr.left = new Node(Integer.parseInt(values[i]));

                q.add(curr.left);

            }

            i++;

            // right child

            if (i < values.length && !values[i].equals("null")) {

                curr.right = new Node(Integer.parseInt(values[i]));

                q.add(curr.right);

            }

            i++;

        }

        return root;

    }

    // Find leftmost batsman in the last row

    static int findLeftmostLastRow(Node root) {

        if (root == null) return -1;

        Queue<Node> q = new LinkedList<>();

        q.add(root);

        int leftmost = root.val;

        while (!q.isEmpty()) {

            int levelSize = q.size();

            for (int i = 0; i < levelSize; i++) {

                Node curr = q.poll();

                if (i == 0) {

                    leftmost = curr.val; // first node in this level

                }

                if (curr.left != null) q.add(curr.left);

                if (curr.right != null) q.add(curr.right);

            }

        }

        return leftmost;

    }

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int n = Integer.parseInt(sc.nextLine());

        String[] values = sc.nextLine().split(" ");

        Node root = buildTree(values);

        System.out.println(findLeftmostLastRow(root));

    }

}
