Date : 01-09-2025
Given the head of a linked list, remove the nth node from the end of the list and return its head.
 
Example 1:
 
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:
Input: head = [1], n = 1
Output: []
Example 3:
Input: head = [1,2], n = 1
Output: [1]
 
Constraints:
•	The number of nodes in the list is sz.
•	1 <= sz <= 30
•	0 <= Node.val <= 100
•	1 <= n <= sz

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        // Step 1: Find the length of the list
        int length = 0;
        ListNode temp = head;
        while (temp != null) {
            length++;
            temp = temp.next;
        }

        // Step 2: If we need to remove the head
        if (n == length) {
            return head.next;
        }

        // Step 3: Find the node just before the one to remove
        int removeIndex = length - n;  // 0-based index of node to remove
        temp = head;
        for (int i = 1; i < removeIndex; i++) {
            temp = temp.next;
        }

        // Step 4: Remove the node
        temp.next = temp.next.next;

        return head;
    }
}


